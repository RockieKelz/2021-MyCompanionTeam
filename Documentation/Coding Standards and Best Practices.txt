Coding Standards and Best Practices

Agreeing Members:
Adam Deye
Sam Whorton
Amber Xiong
Racquel McCall

Purpose:

To develop reliable and maintainable applications, you must follow coding standards and best practices.
The naming conventions, coding standards and best practices described in this document are compiled from our own experience. 
All team members are always expected to follow the coding standards and best practices.


** Folder Heiarchy **
	
	Only folders created at the top most level.

** Commenting standards **

	File header expectation
		Example:

	Method heading expectation
		Example:

	Code block expectation
		Example:


** Naming convention **

	Meaningful, descriptive words to name variables.	

	Good:
		string characterName;
		int Row, Column;
		GameObject spawnedItem;
		
	Not Good:
		string nam;
		int i,j;
		GameObject temp;

	Capitalization expectation
	
		PascalCase should be used for class and method names.

		CamelCase should be used for method arguments and local variables.

		Example: public class Character
			 {
				public Character PrintDetails(string characterName)
				{
					//...
				}
			 }
		
	Standard Prefixing 
		
		The letter I should be used to prefix an interface.

		Example: public interface ICharacter {};
		
	Abbreviation use 
	
		Avoid using abbreviations excluding Xml, etc.

		Example: Do // string firstName; 
			 Don't // string frstNm;
		
** Layout Conventions **	

	Indenting standard

		Smart indenting must be utilized at all times.
		
		Visual studio keyboard shortcut is Ctrl+K followed by Ctrl+F.

		Example: public class Character
			 {
				public Character PrintDetails(string characterName)
				{
					//...
				}
			 }
		
	Curly braces ( {} ) format

		Always align curly braces vertically.

		Example: class Character
			 {
				static void PrintName()
				{
					// ...
				}
			 }
		
	Blank line expectation

		Seperate methods and different sections by one blank line.

		Example: class Character
			 {
				static void PrintName()
				{
					// ...
				}
			 }

	Spacing around operators

		All operators must contain a preceeding and a following space.

		Example: int age = 31;

	Maximum characters per line
	
		Number of characters per line should not exceed 80.
		
	Maximum nested conditions 

		Number of nested conditions should not exceed 5.
		
	Maximum lines per method

		Number of lines per method should not exceed 20 lines.
		
	Maximum lines per file

		Number of lines per file should not exceed 400.

	#region usage
		Example: #region MyRegion
			 
			 // ...

			 #EndRegion
		
** Programming Practices **

	Static values (hardcoded numbers. Const variables, and #defines)

		Do not hard code numbers unless absolutely unavoidable. 

		Do not use SCREAMING CAPS for constants.

	Commenting out code

		Each variable must have a comment explaining its purpose.
	
		Every method must have a comment explaining its purpose.

		Single line comments should containe a splace at the beginning.

		Multiple line comments should contain "//" at the beginning of each line.

		Example: int userAge; // Keep track of user's age.

			 class Character // Store's information for each character.
			 {
				static void PrintName() // Prints the character's name.
				{
					// ...
				}
			 }

			 // This is an example of a
			 // multiple line comment. 

	DRY practices (“Don’t Repeat Yourself")

		Every piece of of knowledge must have a single, unambiguous, authoritative representation
		within the system.